import blockchain;

vector Nft_ids <Byte32>;

vector Nft_Values <Bytes>;

// 一次给多个用户转账
vector Targets <Byte32>;

// 一次原始NFT发行交易
table RawIssueTransaction {
    total:       Uint32,
    configure:   byte,
    to:          Byte32,
    name:        Bytes,
    description: Bytes,
}

// 一次原始NFT分发交易
// 支持一笔交易分发多个NFT，token_id根据顺序递增
// 通过这个交易可以构造出新的class_value，以及一堆NFT_value
table RawDistributeTransaction {
    class_id:        Byte32,
    class_old_value: Bytes,
    to:              Targets,
}

// 一次原始转账交易
// 可支持同时转出多个所属的NFT，Nfts的数量与Targets的数量必须相同
// type:
// 0-NFT
// 1-Class
table RawTransferTransaction {
    typ:            byte,
    nft_ids:        Nft_ids,     // 唯一标识nft的id,
    nft_old_values: Nft_Values,  // 本次更新的旧值
    to:             Targets,     // 同时给多人转账
}

vector EXTDATAS <Bytes>;

// 给某种类型的NFT增加额外数据
// 可以批量更新，但只支持同类型
// type:
// 0-NFT
// 1-Class
table RawUpdateTransaction {
    typ:            byte,
    nft_ids:        Nft_ids,    // 唯一标识nft的id,
    nft_old_values: Nft_Values, // 本次更新的旧值
    state:          Bytes,      // 每个key更新的state，不更新也需要填这一项
    ext_datas:      EXTDATAS,   // 每个Key的新的ext_datas项
}

// 将某些Key value从SMT抽取出来成为Cell
// 可以批量抽取，但只支持同类型
// 检测到此类交易后，会去outputs里寻找是否有匹配的cell
// type:
// 0-NFT
// 1-Class
table RawExtractTransaction {
    typ:            byte,
    nft_ids:        Nft_ids,       // 唯一标识nft的id,
    nft_old_values: Nft_Values,    // 本次更新的旧值
}

// 将某些Key value从Cell中插入SMT
// 可以批量插入，但只支持同类型
// 检测到此类交易后，会去inputs里寻找是否有匹配的cell
// type:
// 0-NFT
// 1-Class
table RawInsertTransaction {
    typ:      byte,
    nft_ids:   Nft_ids,     // 本交易指定的key,
}


// type 
// 0-Issue
// 1-Distribute
// 2-tranfer
// 3-update 
// 4-extract 
// 5-insert
table NftTransaction {
    typ: byte,
    transaction: Bytes,
    signature: Bytes,
}

// 一系列交易
vector NftTransactionVec <NftTransaction>;

// SMT的MerkleProof
vector SmtProof <byte>;

// 一次更新需要的所有信息
table SmtUpdateAction {
    proof:     SmtProof,             //本次打包状态转换的证明
}


// 在Witness的input_type内放置SmtUpdateAction
// 在Witness的lock_type内放置TransactionVec
// Cell version:
// 0: issuer_cell
// 1: class_cell
// 2: nft_cell
// 3: single_owner nft_cell
// 4: multi_owner nft_cell